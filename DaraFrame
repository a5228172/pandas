import pandas as pd
import numpy as np

a = pd.DataFrame({"one":[1,2,3],'two':[4,5,6]},index=['a','b','c'])

print(a.index)      #行索引
print(a.values)     #值
print(a.T)          #倒
print(a.columns)    #列索引
print(a.describe()) #统计
a1  = pd.DataFrame({'two':[1,2,3,4],'one':[4,5,6,7]},index=['c','d','b','a'])
# print(a+a1)
a1.loc['d','two']=np.nan
a1.loc['d','one']=np.nan
a1.loc['c','two']=np.nan
print(a1)
print('---------')
print(a1.dropna(how='all'))
print('---------')
a1 = a1.dropna(how='all')
print(a1.dropna(axis=1))        #按行求值   axis=1
print('---------')
print(a1.sort_values(by='two',ascending=False))
print(pd.date_range('2010-01-01',periods=60,freq='B'))
sr = pd.Series(np.arange(1000),index=pd.date_range('2017-01-01',periods=1000))
print(sr)
print('---------')
print(sr.resample('W').sum())
print('---------')
print(sr.resample('M').sum())
print('---------')
print(sr.resample('M').mean())
print('---------')
print(sr.truncate((before='2018-02-03',offset="2019-01-45")))
print('---------')
pd.read_excel('asd.xlsx',index_col='date',parse_dates=['date'],header=None,name=)
import pandas as pd
 
path = 'E:\python\测试\\数据查询.xlsx'
data = pd.DataFrame(pd.read_excel(path,sheet_name='Left',header=1,converters={'A': str}))     # converters={'A': str} 设置A列格式为文本
 
data.index                       # 查看索引
data.index.values
data.values                      # 查看数值
data.sort_index()                # 按索引排序
data.sort_values()               # 按数值排序
data.head( 5 )                   # 查看前5行
data.tail( 3 )                   # 查看后3行
data.values                      # 查看数值
datashape                        # 查看行数、列数
data.isnull()                    # 查找data中出现的空值
data.unique()                    # 查看唯一值
data.columns                     # 查看data的列名
data.sort_index()                # 索引排序 
data.sort_values()               # 值排序
 
pd.merge(data1,data2)            # 合并,以下为左连接
pd.merge(data1,data2,on=[a],how='left') 
'''
'left'：merge时，以左边表格的键为基准进行配对，如果左边表格中的键在右边不存在，则用缺失值NaN填充。
'right'：merge时，以右边表格的键为基准进行配对，如果右边表格中的键在左边不存在，则用缺失值NaN填充。
'''
pd.concat([data1,data2],axis=0)  # 合并，与merge的区别，自查（特别注意要使用[]）
pd.concat([data01,data02,data03],axis=1)             # 合并横向拼接
pd.pivot_table( data )           # 用df做data透视表（类似于Excel的数透）
 
data.reset_index()               # 修改、删除原有索引
data.reindex()                   # 重置索引，如下示例
data.index = range(len(data))    # 重置索引，从0开始
 
a=data['x']                      # 取列名为'x'的列，格式为series
b=data[['x']]                    # 取列名为'x'的列，格式为Dataframe
c=data[['w','z']]                # 取多列时需要用Dataframe的格式
data.loc['A']                    # 取行名为'A'的行
data.loc[:,['x','z'] ]           # 表示选取所有的行以及columns为x,z的列
data['name'].values              # 取列名为'name'的列的值（取出来的是array而不是series）取单行后是一个Series，Series有index而无columns，可以用name来获取单列的索引
data.head(4)                     # 取头四行
data.tail(3)                     # 取尾三行
data= data.iloc[2:, 2:20]        # 选择2行开始、2-11列
[m, n] = data.shape              # 对m,n进行复制，m等于最大行数  n等于最大列数
 
df.drop([0],axis=0)                                 
data.notnull()                   # 非空值
data.dropna()                    # 删除空值
data.dropna()                    # 删除有空值的行
data.dropna(axis=1)              # 删除有空值的列
data.dropna(how='all')           # 删除所有值为Nan的行
data.dropna(thresh=2)            # 至少保留两个非缺失值
data.strip()                     # 去除列表中的所有空格与换行符号
data.fillna(0)                   # 将空值填充0
data.replace(1, -1)              # 将1替换成-1
 
data.fillna(100)                      # 填充缺失值为100
data.fillna({'语文':100,'数学':100,})        # 不同列填充不同值
data.fillna(method='ffill')                 # 将空值填充为上一个值
data.fillna(method='bfill')                 # 将空值填充下一个值
data.fillna(method='bfill',limit=1)         # 将空值填充下一个值，限制填充数量为1
 
 
 
# 显示所有列
pd.set_option('display.max_columns', None)
# 显示所有行
pd.set_option('display.max_rows', None)
 
# 打印表头列表
print(data.columns.tolist())
 
# 转换为时间列
data['有效起始日期'] = pd.to_datetime(data['有效起始日期'])
 
# 转换为时间
df["date"] = pd.to_datetime(df["date"])
# 获取年月日
df["year-month-day"] = df["date"].apply(lambda x: x.strftime("%Y-%m-%d"))
# 获取年
df["year"] = df["date"].apply(lambda x: x.strftime("%Y"))
# 获取月
df["month"] = df["date"].apply(lambda x: x.strftime("%m"))
# 获取日
df["day"] = df["date"].apply(lambda x: x.strftime("%d"))
# 获取月日
df["month-day"] = df["date"].apply(lambda x: x.strftime("%Y-%m"))
# 获取周
df['week'] = df['date'].apply(lambda x: x.strftime('%W'))
--加一天
df['data_date'] + pd.Timedelta(days=1)
--减一天
df['data_date'] - pd.Timedelta(days=1)
print(df)
print(df.dtypes)
 
# 筛选
data = data.loc[(data['物料编码'] == bianma)]
 
# 计算类
data = data.groupby(["年/月", "物料编码",'商品名称'], axis = 0)["数量（Kg）"].sum().reset_index()    # 分类汇总求和
'''reset_index()可以将分类汇总导致的缩进填充进去'''
